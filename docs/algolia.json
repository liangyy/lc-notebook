[{"content":"Some interesting questions.\nI didn\u0026amp;rsquo;t get it but it is interesting.\n","date":1602201600,"description":"","lastmod":"2020-10-09T00:00:00Z","objectID":"2d3174f210d2886afc0d0eb0bb87c255","permalink":"https://liangyy.github.io/lc-notebook/interesting/","publishdate":"2020-10-09T00:00:00Z","title":"Interesting"},{"content":"Shuffle a set of numbers without duplicates. Example: // Init an array with set 1, 2, and 3. int[] nums = {1,2,3}; Solution solution = new Solution(nums); // Shuffle the array [1,2,3] and return its result. Any permutation of [1,2,3] must equally likely to be returned. solution.shuffle(); // Resets the array back to its original configuration [1,2,3]. solution.reset(); // Returns the random shuffling of array [1,2,3]. solution.shuffle(); This is about generating random permutation when we have a random integer generator.\nAs it sounds, it is not a typical question but definitely something need to know (here I\u0026amp;rsquo;d rather treat it as something good to know).\nThe solution mentions about Fisher-Yates shuffle (which I\u0026amp;rsquo;m not aware before). The approach is straight forward. Suppose we have N integers, the way to generate a random permutation is:\n For jth position, randomly select one from the remaining (N - j + 1) elements. Do it from position 1 to N.  Why it works? Since for permutation n1, \u0026amp;hellip;, nN,\n n1 has 1 / N probability to be positioned at the first position. n2 has 1 / (N - 1) probability to be positioned at the second position. And so on so forth.  So, n1, \u0026amp;hellip;, nN has 1 / N! probability to be drawn. As there are N! number of permutations, each one of them has the same probability to be drawn.\nOK, the important thing is how to implement it efficiently. For a naive implementation, we need to remove the elements that have been selected. It requires $O(N)$ time complexity at each draw and overall it needs $O(N^2)$ time complexity to obtain a permutation.\nHow to improve? All we need is to maintain the subarray containing the unselected elements. This can be done by swapping. Specifically, at position j (the place we want to fill in), suppose subarray nums[j:] contains the unselected elements, we can swap the selected one (with index j + random_idx where random_idx is among 0:(N-j)) and the current jth element. By doing so, the new subarray nums[j+1:] …","date":1602374400,"description":"","lastmod":"2020-10-11T00:00:00Z","objectID":"53e65867aa21d15701444a3c8af1894b","permalink":"https://liangyy.github.io/lc-notebook/interesting/q384/","publishdate":"2020-10-11T00:00:00Z","title":"Q384. Shuffle an Array"},{"content":"In an array A containing only 0s and 1s, a K-bit flip consists of choosing a (contiguous) subarray of length K and simultaneously changing every 0 in the subarray to 1, and every 1 in the subarray to 0. Return the minimum number of K-bit flips required so that there is no 0 in the array. If it is not possible, return -1. Example 1: Input: A = [0,1,0], K = 1 Output: 2 Explanation: Flip A[0], then flip A[2]. Example 2: Input: A = [1,1,0], K = 2 Output: -1 Explanation: No matter how we flip subarrays of size 2, we can\u0026#39;t make the array become [1,1,1]. Example 3: Input: A = [0,0,0,1,0,1,1,0], K = 3 Output: 3 Explanation: Flip A[0],A[1],A[2]: A becomes [1,1,1,1,0,1,1,0] Flip A[4],A[5],A[6]: A becomes [1,1,1,1,1,0,0,0] Flip A[5],A[6],A[7]: A becomes [1,1,1,1,1,1,1,1] The solution suggests to do it greedily. By \u0026amp;ldquo;greedy\u0026amp;rdquo;, it means that we could start from the very left and if there is 0 at position i, we apply K-bit operation for the subarray A[i], ..., A[i + K - 1]. And then, the solution discusses about how to do this in an efficient way. For the latter, it utilizes the trick constantly appearing in handling interval. From my word, we can define an interval by marking up the start and end position. And we read the interval via scanning the list and at each iteration, we grab the information from the previous position and the mark of the current position to know if the current point is in any interval.\nOK, the above discussion is very hand-waving in two senses:\n Why the greedy approach works? How exactly is it implemented?  First thing first: Why greedy? Note that the only mattering thing is the number of operations on each position. So, if we can see that the order of the operations does not matter. Consider the very left entry, only 0 or 1 operation makes sense, any more operations are not necessary (they cancel out themselves). Then, we can go the next entry and do the same reasoning given that we\u0026amp;rsquo;ve know that it has been applied 0 or 1 operation from …","date":1602201600,"description":"","lastmod":"2020-10-09T00:00:00Z","objectID":"6c6f6f30e93803a9b09ceab2360e3059","permalink":"https://liangyy.github.io/lc-notebook/interesting/q995/","publishdate":"2020-10-09T00:00:00Z","title":"Q995: Minimum Number of K Consecutive Bit Flips"},{"content":"We need to know these tricks well.\n","date":1602288000,"description":"","lastmod":"2020-10-10T00:00:00Z","objectID":"607b2ad3adb8e5aa905cbf3b68b65fc7","permalink":"https://liangyy.github.io/lc-notebook/needtoknow/","publishdate":"2020-10-10T00:00:00Z","title":"Need to Know"},{"content":"Say you have an array for which the ith element is the price of a given stock on day i. Design an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times) with the following restrictions: You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again). After you sell your stock, you cannot buy stock on next day. (ie, cooldown 1 day) Example: Input: [1,2,3,0,2] Output: 3 Explanation: transactions = [buy, sell, cooldown, buy, sell] At first, I thought about dynamic programming with the thought that:\n For the first j days, the best solution is among: 1. the first j-1 day and do nothing at j; 2. bug and sell at kth and jth day, and doing something at the first k-2 days (we need k-2 since we cannot do anything at k-1th day in order to buy at kth day).\n With this idea, it yields an DP algorithm with time complexity $O(N^2)$ since at each time I need to traverse to get the choice of k.\nOK, how to improve? It can be done in linear time ..\nHow about maintaining some finer information? At jth day, all I need to decide is whether I want to buy, sell, or cool down (I have to cool down). The rule is (from previous day to current day):\n sell -\u0026amp;gt; cool down; buy -\u0026amp;gt; sell; cool down -\u0026amp;gt; buy  Of course, we can do nothing as well. So, essentially, we have 2 choices: 1. to sell (if have share); 2. to have share (by buying or not selling). But we need to know if we could buy so we also need to know the status about not having a share. So, we maintain three events: 1. sell at j day; 2. have a share at j day; 3. not have a share at j day (not by selling). And taking DP in, we want to maintain the best solution where the last state is one of the three respectively.\nSo, the pseudocode is:\nbest_sell = [ 0 ] * len(prices) best_hold = [ 0 ] * len(prices) best_noshare = [ 0 ] * len(prices) # initialize best_sell[0] = -float(\u0026#39;inf\u0026#39;) best_hold[0] = …","date":1602288000,"description":"","lastmod":"2020-10-10T00:00:00Z","objectID":"513fd6d4af1853064d434bf44bf5d808","permalink":"https://liangyy.github.io/lc-notebook/needtoknow/q309/","publishdate":"2020-10-10T00:00:00Z","title":"Q309: Best Time to Buy and Sell Stock with Cooldown"},{"content":"Given a string s, remove duplicate letters so that every letter appears once and only once. You must make sure your result is the smallest in lexicographical order among all possible results. Note: This question is the same as 1081: https://leetcode.com/problems/smallest-subsequence-of-distinct-characters/ Example 1: Input: s = \u0026amp;quot;bcabc\u0026amp;quot; Output: \u0026amp;quot;abc\u0026amp;quot; Example 2: Input: s = \u0026amp;quot;cbacdcbc\u0026amp;quot; Output: \u0026amp;quot;acdb\u0026amp;quot; Constraints: 1 \u0026amp;lt;= s.length \u0026amp;lt;= 104 s consists of lowercase English letters. I think this question definitely fits into \u0026amp;ldquo;Need to Know\u0026amp;rdquo; category. It uses clever trick which I did not get it initially.\nIt turns out that we could do this greedily. From left to right, when we get increasing characters in a row, we don\u0026amp;rsquo;t need to do any further thing. But when a small character occurs, we want to start over from the small one if the previous characters re-occur in the subsequent strings. But what if some characters do not occur again? It suggests that they should be at least at the current position or even occur earlier. But since the previous string is increasing, to keep the not re-occurring character at the current position is the best solution.\nOK, let\u0026amp;rsquo;s wrap up the idea above into an algorithm. First we need to know if the character is re-occurring after a position. To do so, we can record the last position of each character. Another detail is that whenever we saw a character that have already occurred in the current string, we safely ignore it since to start over at the new one won\u0026amp;rsquo;t give better solution that the current one.\nSumming up, the algorithm is:\n  At position j, if s[j] is not in the current stack (use a dict to maintain this):\n If s[j] \u0026amp;gt; stack[-1], append s[j] to the end of stack If s[j] \u0026amp;lt; stack[-1] and last_position[stack[-1]] \u0026amp;gt; j, pop the top one in the stack until one of the two conditions s[j] \u0026amp;lt; stack[-1] and last_position[stack[-1]] \u0026amp;gt; j do not hold.    The stack contains …","date":1602460800,"description":"","lastmod":"2020-10-12T00:00:00Z","objectID":"93e2e847497a66818fff9ed1d996bbe3","permalink":"https://liangyy.github.io/lc-notebook/needtoknow/q316/","publishdate":"2020-10-12T00:00:00Z","title":"Q316. Remove Duplicate Letters"},{"content":"Given a non-empty string check if it can be constructed by taking a substring of it and appending multiple copies of the substring together. You may assume the given string consists of lowercase English letters only and its length will not exceed 10000. Example 1: Input: \u0026amp;quot;abab\u0026amp;quot; Output: True Explanation: It\u0026#39;s the substring \u0026amp;quot;ab\u0026amp;quot; twice. Example 2: Input: \u0026amp;quot;aba\u0026amp;quot; Output: False Example 3: Input: \u0026amp;quot;abcabcabcabc\u0026amp;quot; Output: True Explanation: It\u0026#39;s the substring \u0026amp;quot;abc\u0026amp;quot; four times. (And the substring \u0026amp;quot;abcabc\u0026amp;quot; twice.) Brute force solution does the job. In short, check all prefixes with length divides len(s).\n","date":1602374400,"description":"","lastmod":"2020-10-11T00:00:00Z","objectID":"2dd0ef2515e10231acb19806db601c57","permalink":"https://liangyy.github.io/lc-notebook/needtoknow/q459/","publishdate":"2020-10-11T00:00:00Z","title":"Q459. Repeated Substring Pattern"},{"content":"Given a positive integer n, find the number of non-negative integers less than or equal to n, whose binary representations do NOT contain consecutive ones. Example 1: Input: 5 Output: 5 Explanation: Here are the non-negative integers \u0026amp;lt;= 5 with their corresponding binary representations: 0 : 0 1 : 1 2 : 10 3 : 11 4 : 100 5 : 101 Among them, only integer 3 disobeys the rule (two consecutive ones) and the other 5 satisfy the rule. Let\u0026amp;rsquo;s say the number without consecutive ones is called \u0026amp;ldquo;good number\u0026amp;rdquo;. To count the number of \u0026amp;ldquo;good number\u0026amp;rdquo; with less than or equal to N bits is straight forward. In brief, we can maintain some states like the number of \u0026amp;ldquo;good number\u0026amp;rdquo; with at most j bits that ends with zero or one. With this setting up, we can have some recursion like:\n ngood_end_with_1[j] = ngood_end_with_0[j - 1] ngood_end_with_0[j] = ngood_end_with_1[j - 1] + ngood_end_with_0[j - 1]  OK, then the problem becomes how to count the number of \u0026amp;ldquo;good number\u0026amp;rdquo; \u0026amp;lt;= the target (and it takes me forever to get it right, and this motivates me the write it down ..).\nThe initial idea is simple. Suppose the target is 10000, then we can simply count the \u0026amp;ldquo;good number\u0026amp;rdquo; with at most 4 bits (and add 1 at the end since we need to include 10000 as well). Then for a more complex number like 10100, then we can count 4-bit \u0026amp;ldquo;good number\u0026amp;quot;s and count \u0026amp;ldquo;good number\u0026amp;rdquo; like 100XX which means counting 2-bit \u0026amp;ldquo;good number\u0026amp;rdquo;. Still, we need extra 1 to count 10100. But what if we encounter 10110? Besides the 4-bit and 2-bit, we need to consider 1010X, essentially 1-bit. And no need to add extra 1 since we don\u0026amp;rsquo;t want to count 10110.\nSo, we can scan from the leading \u0026amp;ldquo;1\u0026amp;rdquo; and count the n-bit \u0026amp;ldquo;good number\u0026amp;rdquo; and move to the next \u0026amp;ldquo;1\u0026amp;rdquo;. If the \u0026amp;ldquo;1\u0026amp;rdquo; is right after another \u0026amp;ldquo;1\u0026amp;rdquo;, we count the n-bit and then we can return since for number 11\u0026amp;hellip; then …","date":1602374400,"description":"","lastmod":"2020-10-11T00:00:00Z","objectID":"68362603e66a89a32bda3de027796169","permalink":"https://liangyy.github.io/lc-notebook/needtoknow/q600/","publishdate":"2020-10-11T00:00:00Z","title":"Q600: Non-negative Integers without Consecutive Ones"},{"content":"An undirected, connected graph of N nodes (labeled 0, 1, 2, ..., N-1) is given as graph. graph.length = N, and j != i is in the list graph[i] exactly once, if and only if nodes i and j are connected. Return the length of the shortest path that visits every node. You may start and stop at any node, you may revisit nodes multiple times, and you may reuse edges. Example 1: Input: [[1,2,3],[0],[0],[0]] Output: 4 Explanation: One possible path is [1,0,2,0,3] Example 2: Input: [[1],[0,2,4],[1,3,4],[2],[1,2]] Output: 4 Explanation: One possible path is [0,1,4,2,3] Note: 1 \u0026amp;lt;= graph.length \u0026amp;lt;= 12 0 \u0026amp;lt;= graph[i].length \u0026amp;lt; graph.length I did not get this question and it did look very complicated to me. Before going to the solution, I should say that there are some general ideas to wear before thinking about a question involving shortest path.\n Shortest path from a start to an end (Dijkstra\u0026amp;rsquo;s). Shortest path among all pairs of nodes (Floyd–Warshall).  For an unweighted graph, the Dijkstra\u0026amp;rsquo;s algorithm is very similar to a BFS traverse.\nFor this question, the essential idea is to construct the state properly.\nFirst of all, what could be a brute force approach? We explore the nodes randomly and we are free to go back and forth. But the problem is that we may get stuck by loop. So, we need to realize that we are in a loop. The trick to realize it is by constructing the state properly. Let\u0026amp;rsquo;s say the state is the current explored notes and the current position. The edges that connect the state space are defined implicitly by the edges of the graph. In other word, at the current state, we can move to another state by exploring the neighbors of the current node (at the position).\nOK, the initial state would be (explored node set = (node i), node i) and we can do BFS until hitting the state with explored node set = all nodes.\nIn terms of the data structure, we can use a series of binary numbers to represent if the nth node has been explored (the way to …","date":1602374400,"description":"","lastmod":"2020-10-11T00:00:00Z","objectID":"b7ed2b8abfd2aaa840ced90735263507","permalink":"https://liangyy.github.io/lc-notebook/needtoknow/q847/","publishdate":"2020-10-11T00:00:00Z","title":"Q847. Shortest Path Visiting All Nodes"},{"content":"Use it when seeing needs and fits.\n","date":1602288000,"description":"","lastmod":"2020-10-10T00:00:00Z","objectID":"4494ff8e405104b0682a0c124f86b18d","permalink":"https://liangyy.github.io/lc-notebook/smalltrick/","publishdate":"2020-10-10T00:00:00Z","title":"Small Trick"},{"content":"The thief has found himself a new place for his thievery again. There is only one entrance to this area, called the \u0026amp;quot;root.\u0026amp;quot; Besides the root, each house has one and only one parent house. After a tour, the smart thief realized that \u0026amp;quot;all houses in this place forms a binary tree\u0026amp;quot;. It will automatically contact the police if two directly-linked houses were broken into on the same night. Determine the maximum amount of money the thief can rob tonight without alerting the police. Example 1: Input: [3,2,3,null,3,null,1] 3 / \\ 2 3 \\ \\ 3 1 Output: 7 Explanation: Maximum amount of money the thief can rob = 3 + 3 + 1 = 7. Example 2: Input: [3,4,5,1,3,null,1] 3 / \\ 4 5 / \\ \\ 1 3 1 Output: 9 Explanation: Maximum amount of money the thief can rob = 4 + 5 = 9. As in tree structure, we can say that the problem for the tree can be divided into problems of the left and right subtrees and once we get these subproblems out, we could merge them somehow to get the answer for the full tree.\nIt fits well for tree structure since we don\u0026amp;rsquo;t need to worry about the issue of duplicated work. The root could either be robbed or not and the solution takes the better one among the two.\nno_rob_val(node) = max(rob_val(node.left), no_rob_val(node.left)) + max(rob_val(node.right), no_rob_val(node.right)) rob_val(node) = node.val + no_rob_val(node.left) + no_rob_val(node.right) From here, the first thought is to solve rob_val and no_rob_val separately. But the problem is that rob_val(node) and no_rob_val(node) generates duplicated recursion. More specifically, they ask for no_rob_val(node.left) and no_rob_val(node.right) twice.\nOK, here comes the trick. We can solve the rob_val and no_rob_val in one calculation, simply we calculate no_rob_val(node.left) and no_rob_val(node.right) once and apply to both no_rob_val(node) and rob_val(node).\nSo, it becomes:\nno_rob_val_left, rob_val_left = soln(node.left) no_rob_val_right, rob_val_right = soln(node.right) no_rob_val = …","date":1602288000,"description":"","lastmod":"2020-10-10T00:00:00Z","objectID":"e5038056b198d7292da2c91b0f8846dc","permalink":"https://liangyy.github.io/lc-notebook/smalltrick/q337/","publishdate":"2020-10-10T00:00:00Z","title":"Q337: House Robber III"},{"content":"About This is my LeetCode notebook.\nIt is by no mean systematic but a playground recording what I learned and felt interesting and worth to write down. As time passes, everything goes away but wish the joy might stay.\n","date":1602201600,"description":"Home page","lastmod":"2020-10-09T00:00:00Z","objectID":"3976528693a0108357f4928017600865","permalink":"https://liangyy.github.io/lc-notebook/","publishdate":"2020-10-09T00:00:00Z","title":"Home page"},{"content":"Hugo is a static site engine written in Go.\nIt makes use of a variety of open source projects including:\n Cobra Viper J Walter Weatherman Cast  Learn more and contribute on GitHub.\n","date":1397001600,"description":"","lastmod":"2014-04-09T00:00:00Z","objectID":"6083a88ee3411b0d17ce02d738f69d47","permalink":"https://liangyy.github.io/lc-notebook/about/","publishdate":"2014-04-09T00:00:00Z","title":"About Hugo"}]